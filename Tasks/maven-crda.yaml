apiVersion: tekton.dev/v1beta1
kind: Task

metadata:
  name: maven-crda-task

spec:
  description: >-
    Code ready dependency analysis is a tool by RedHat which checks for any dependency vulnerabilities. CRDA currently supports Golang, NPM, Python and Java (maven). 
  workspaces:
    - name: output
      description: Volume of Workspace where all reports and dependencies are installed.

  params:
    - name: manifest-file-path
      description: Path of the manifest file to perform analysis.

    - name: report-file-path
      description: Path of the file to save analysis report.

    - name: pkg-installation-directory-path
      description: Path of a directory in workspace, where dependencies will be installed.

    - name: image
      description: CRDA Image for Dependency Scanning.
    
    - name: image
      description: Docker Maven Image.
    
    - name: crda-host
      description: CRDA host
      default: ""

  steps:
    - name: maven-crda-task
      image: $(params.image)
      workingDir: $(workspaces.output.path)
      env:
        - name: CRDA_KEY
          valueFrom:
            secretKeyRef:
              name: crda
              key: crda-key
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: token
              key: auth-token
        - name: HOST
          value: $(params.crda-host)

      script: |
        #!/bin/sh

        #setting path to dependency directory
        printf "Setting the paths\n"
        export MAVEN_HOME=$(params.pkg-installation-directory-path)
        printf "Path set successfully\n"

        mkdir -p $HOME/.crda
        touch $HOME/.crda/config.yaml
        echo auth_token: ${AUTH_TOKEN} >> $HOME/.crda/config.yaml
        echo crda_key: ${CRDA_KEY} >> $HOME/.crda/config.yaml
        echo host: ${HOST} >> $HOME/.crda/config.yaml
        echo $(ls)

        printf "\nGenerating report\n"
        #Getting the report using the CRDA
        report=$(crda analyse $(params.manifest-file-path) -j)
        echo $report
        exit_code=$?

        #Save exit code to check in next stage if task completed successfully or not
        #In case of failure
        if [ $exit_code == 1 ]
        then
          printf "CRDA failed, saving the exit code...\n"
          jq -n {} | \
          jq --arg exit_code "$exit_code" '. + {exit_code: $exit_code}' > \
          $(params.report-file-path)
        #Save the report and exit Code
        else
          printf "Report generated successfully, saving the report and exit code...\n"
          jq -n {} | \
          jq --argjson report "$report" '. + {report: $report}' | \
          jq --arg exit_code "$exit_code" '. + {exit_code: $exit_code}' > \
          $(params.report-file-path)
        fi
        printf "Successfully saved the report and exit code\n"
